data_dir = "/var/lib/kapacitor"

[http]
  bind-address = ":9092"
  auth-enabled = false
  log-enabled = true
  write-tracing = true
  pprof-enabled = false
  https-enabled = false
  shutdown-timeout = "10s"

[replay]
  dir = "/var/lib/kapacitor/replay"

[storage]
  boltdb = "/var/lib/kapacitor/kapacitor.db"

[task]
  dir = "/var/lib/kapacitor/tasks"
  snapshot-interval = "1m0s"

[[influxdb]]
  enabled = true
  name = "influxdb"
  default = true
  urls = ["http://influxdb:8086"]
  username = ""
  password = ""
  ssl-ca = ""
  ssl-cert = ""
  ssl-key = ""
  insecure-skip-verify = true
  timeout = "5s"
  disable-subscriptions = false
  udp-buffer = 1000
  udp-read-buffer = 0
  startup-timeout = "0"
  [influxdb.subscriptions]
  [influxdb.excluded-subscriptions]

[logging]
  file = "STDOUT"
  level = "INFO"

##########################################
# Configure Alert POST request Endpoints

# As ENV variables:
# KAPACITOR_HTTPPOST_0_ENDPOINT = "example"
# KAPACITOR_HTTPPOST_0_URL = "http://example.com"
# KAPACITOR_HTTPPOST_0_HEADERS_Example = "header"

# [[httppost]]
#   endpoint = "example"
#   url = "http://example.com"
#   headers = { Example = "your-key" }
#   basic-auth = { username = "my-user", password = "my-pass" }
#
#   # Provide an alert template for constructing a custom HTTP body.
#   # Alert templates are only used with post alert handlers as they consume alert data.
#   # The template uses https://golang.org/pkg/text/template/ and has access to the following fields:
#   #    * .ID - The unique ID for this alert
#   #    * .Message - The message of the alert
#   #    * .Details - The details of the alert
#   #    * .Time - The time the alert event occurred
#   #    * .Duration - The duration of the alert event.
#   #    * .Level - The level of the alert, i.e INFO, WARN, or CRITICAL.
#   #    * .Data - The data that triggered the alert.
#   #
#   # Specify the template inline.
#   alert-template = "{{.Message}}:{{range .Data.Series}}{{.Tags}},{{range .Values}}{{.}}{{end}}{{end}}"
#   # Specify an absolute path to a template file.
#   alert-template-file = "/path/to/template/file"
#
#   # Provide a row template for constructing a custom HTTP body.
#   # Row templates are only used with httpPost pipeline nodes as they consume a row at a time.
#   # The template uses https://golang.org/pkg/text/template/ and has access to the following fields:
#   #    * .Name - The measurement name of the data stream
#   #    * .Tags - A map of tags on the data.
#   #    * .Values - A list of values, each entry is a map containing a "time" key for the time of the point
#   #       and keys for all other fields on the point.
#   #
#   # Specify the template inline.
#   row-template = "{{.Name}} host={{index .Tags \"host\"}}{{range .Values}} {{index . "time"}} {{index . "value"}}{{end}}"
#   # Specify an absolute path to a template file.
#   row-template-file = "/path/to/template/file"

[slack]
  # Configure Slack.
  enabled = false
  # The Slack webhook URL, can be obtained by adding
  # an Incoming Webhook integration.
  # Visit https://slack.com/services/new/incoming-webhook
  # to add new webhook for Kapacitor.
  url = ""
  # Default channel for messages
  channel = ""
  # If true all the alerts will be sent to Slack
  # without explicitly marking them in the TICKscript.
  global = false
  # Only applies if global is true.
  # Sets all alerts in state-changes-only mode,
  # meaning alerts will only be sent if the alert state changes.
  state-changes-only = false

[telegram]
  # Configure Telegram.
  enabled = false
  # The Telegram Bot URL should not need to be changed.
  url = "https://api.telegram.org/bot"
  # Telegram Bot Token, can be obtained From @BotFather.
  token = ""
  # Default recipient for messages, Contact @myidbot on Telegram to get an ID.
  chat-id = ""
  # Send Markdown or HTML, if you want Telegram apps to show bold, italic, fixed-width text or inline URLs in your alert message.
  #parse-mode  = "Markdown"
  # Disable link previews for links in this message
  disable-web-page-preview = false
  # Sends the message silently. iOS users will not receive a notification, Android users will receive a notification with no sound.
  disable-notification = false
  # If true the all alerts will be sent to Telegram
  # without explicitly marking them in the TICKscript.
  global = false
  # Only applies if global is true.
  # Sets all alerts in state-changes-only mode,
  # meaning alerts will only be sent if the alert state changes.
  state-changes-only = false

[hipchat]
  # Configure HipChat.
  enabled = false
  # The HipChat API URL. Replace subdomain with your
  # HipChat subdomain.
  # url = "https://subdomain.hipchat.com/v2/room"
  # Visit https://www.hipchat.com/docs/apiv2
  # for information on obtaining your room id and
  # authentication token.
  # Default room for messages
  room = ""
  # Default authentication token
  token = ""
  # If true then all alerts will be sent to HipChat
  # without explicitly marking them in the TICKscript.
  global = false
  # Only applies if global is true.
  # Sets all alerts in state-changes-only mode,
  # meaning alerts will only be sent if the alert state changes.
  state-changes-only = false

[alerta]
  # Configure Alerta.
  enabled = false
  # The Alerta URL.
  url = ""
  # Default authentication token.
  token = ""
  # Default token prefix
  # If you are on older versions of alerta you may need to change this to "Key"
  token-prefix = "Bearer"
  # Default environment.
  environment = ""
  # Default origin.
  origin = "kapacitor"

[sensu]
  # Configure Sensu.
  enabled = false
  # The Sensu Client host:port address.
  addr = "sensu-client:3030"
  # Default JIT source.
  source = "Kapacitor"

[reporting]
  # Send usage statistics
  # every 12 hours to Enterprise.
  enabled = true
  url = "https://usage.influxdata.com"

[stats]
  # Emit internal statistics about Kapacitor.
  # To consume these stats create a stream task
  # that selects data from the configured database
  # and retention policy.
  #
  # Example:
  #  stream|from().database('_kapacitor').retentionPolicy('autogen')...
  #
  enabled = true
  stats-interval = "10s"
  database = "_kapacitor"
  retention-policy= "autogen"

[udf]
# Configuration for UDFs (User Defined Functions)
[udf.functions]
    # Example go UDF.
    # First compile example:
    #   go build -o avg_udf ./udf/agent/examples/moving_avg.go
    #
    # Use in TICKscript like:
    #   stream.goavg()
    #           .field('value')
    #           .size(10)
    #           .as('m_average')
    #
    # uncomment to enable
    #[udf.functions.goavg]
    #   prog = "./avg_udf"
    #   args = []
    #   timeout = "10s"

    # Example python UDF.
    # Use in TICKscript like:
    #   stream.pyavg()
    #           .field('value')
    #           .size(10)
    #           .as('m_average')
    #
    # uncomment to enable
    #[udf.functions.pyavg]
    #   prog = "/usr/bin/python2"
    #   args = ["-u", "./udf/agent/examples/moving_avg.py"]
    #   timeout = "10s"
    #   [udf.functions.pyavg.env]
    #       PYTHONPATH = "./udf/agent/py"

    # Example UDF over a socket
    #[udf.functions.myCustomUDF]
    #   socket = "/path/to/socket"
    #   timeout = "10s"

[talk]
  # Configure Talk.
  enabled = false
  # The Talk webhook URL.
  url = "https://jianliao.com/v2/services/webhook/uuid"
  # The default authorName.
  author_name = "Kapacitor"

# MQTT client configuration.
#  Mutliple different clients may be configured by
#  repeating [[mqtt]] sections.
[[mqtt]]
  enabled = false
  # Unique name for this broker configuration
  name = "localhost"
  # Whether this broker configuration is the default
  default = true
  # URL of the MQTT broker.
  # Possible protocols include:
  #  tcp - Raw TCP network connection
  #  ssl - TLS protected TCP network connection
  #  ws  - Websocket network connection
  url = "tcp://localhost:1883"

  # TLS/SSL configuration
  # A CA can be provided without a key/cert pair
  #   ssl-ca = "/etc/kapacitor/ca.pem"
  # Absolutes paths to pem encoded key and cert files.
  #   ssl-cert = "/etc/kapacitor/cert.pem"
  #   ssl-key = "/etc/kapacitor/key.pem"

  # Unique ID for this MQTT client.
  # If empty used the value of "name"
  client-id = ""

  # Username
  username = ""
  # Password
  password = ""

[[swarm]]
  # Enable/Disable the Docker Swarm service.
  # Needed by the swarmAutoscale TICKscript node.
  enabled = false
  # Unique ID for this Swarm cluster
  # NOTE: This is not the ID generated by Swarm rather a user defined
  # ID for this cluster since Kapacitor can communicate with multiple clusters.
  id = ""
  # List of URLs for Docker Swarm servers.
  servers = ["http://localhost:2376"]
  # TLS/SSL Configuration for connecting to secured Docker daemons
  ssl-ca = ""
  ssl-cert = ""
  ssl-key = ""
  insecure-skip-verify = false